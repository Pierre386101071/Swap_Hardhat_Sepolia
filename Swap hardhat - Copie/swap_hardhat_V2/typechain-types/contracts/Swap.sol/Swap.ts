/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "addToken"
      | "getLiquidity"
      | "getSwapRate"
      | "swap"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LiquidityAdded" | "Swapped" | "TokenAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [_addressToken: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_addressToken: string, _amount: bigint];
  export interface OutputObject {
    _addressToken: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _addressTokenFrom: AddressLike,
    _addressTokenTo: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _addressTokenFrom: string,
    _addressTokenTo: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _user: string;
    _addressTokenFrom: string;
    _addressTokenTo: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [_addressToken: AddressLike];
  export type OutputTuple = [_addressToken: string];
  export interface OutputObject {
    _addressToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Swap extends BaseContract {
  connect(runner?: ContractRunner | null): Swap;
  waitForDeployment(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [_addressToken: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  addToken: TypedContractMethod<
    [_addressToken: AddressLike, _price: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  getLiquidity: TypedContractMethod<
    [_addressToken: AddressLike],
    [bigint],
    "view"
  >;

  getSwapRate: TypedContractMethod<
    [_addressFrom: AddressLike, _addressTo: AddressLike],
    [bigint],
    "view"
  >;

  swap: TypedContractMethod<
    [_addressFrom: AddressLike, _addressTo: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [_addressToken: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [_addressToken: AddressLike, _price: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLiquidity"
  ): TypedContractMethod<[_addressToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSwapRate"
  ): TypedContractMethod<
    [_addressFrom: AddressLike, _addressTo: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [_addressFrom: AddressLike, _addressTo: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "Swapped"
  ): TypedContractEvent<
    SwappedEvent.InputTuple,
    SwappedEvent.OutputTuple,
    SwappedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "Swapped(address,address,address,uint256)": TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
    Swapped: TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;

    "TokenAdded(address)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
  };
}
